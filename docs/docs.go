// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user": {
            "get": {
                "description": "Get all users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/user/delete/{User_id}": {
            "delete": {
                "description": "Delete users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID ของผู้ใช้",
                        "name": "User_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/user/insert": {
            "post": {
                "description": "Insert all users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Insert Array User",
                "parameters": [
                    {
                        "description": "Array User to insert",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userModel.UserInsert"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response insert",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/user/update/{User_id}": {
            "put": {
                "description": "Update users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update users by Id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID ของผู้ใช้",
                        "name": "User_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete User to insert",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userModel.UserDelete"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/users/order/": {
            "get": {
                "description": "Get users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get users Join Table",
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/users/p/": {
            "get": {
                "description": "Get users from the database limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get users Limit Offset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/helper.SuccessResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helper.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "userModel.UserDelete": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 22
                },
                "firstname": {
                    "type": "string",
                    "example": "phat2"
                },
                "lastname": {
                    "type": "string",
                    "example": "cha2"
                },
                "status": {
                    "type": "string",
                    "example": "unactive"
                }
            }
        },
        "userModel.UserInsert": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 21
                },
                "firstname": {
                    "type": "string",
                    "example": "phat"
                },
                "lastname": {
                    "type": "string",
                    "example": "cha"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:1323",
	BasePath:         "/",
	Schemes:          []string{"https"},
	Title:            "Your-Project Document",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
